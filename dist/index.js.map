{"version":3,"file":"index.js","sources":["../node_modules/js-upsert/dist/js-upsert.js","../src/core/managers/FunctionManager.tsx","../src/setters/setFun.tsx","../src/setters/set.tsx","../src/core/managers/EffectManager.tsx","../src/core/Reducers.tsx","../src/core/Dispatcher.tsx","../src/useThis/useThisInstance.tsx","../src/useThis/useThis.ts"],"sourcesContent":["function h(e) {\n  return e.replace(/[\\[\\]'\"]/g, \"\").split(\".\");\n}\nconst c = (e, t) => {\n  let r = Math.floor(Math.random() * 1e6), o = typeof t == \"string\" ? h(t) : t;\n  return {\n    [\"$$@@@@__upsert_hook_\" + r]: {\n      value: e,\n      index: o ?? null,\n      isFunction: typeof e == \"function\"\n    }\n  };\n};\nc.at = (...e) => {\n  const t = e, r = t.pop();\n  return c(r, t);\n};\nfunction y(e, t, r, o = !1, n, l = []) {\n  const u = t;\n  if (t.length <= 1) {\n    if (t.length > 0)\n      try {\n        return e[t[0]] = o ? r(e[t[0] ?? t]) : r, e;\n      } catch {\n        throw `Setting Failed at index ${t[0]} of [${l.join(\n          \" => \"\n        )}] due to the type ${typeof e}, Only array or object is assignable`;\n      }\n    if (e === null || typeof e != \"object\")\n      throw Error(\n        \"Initial value is not a object, ERROR: INITITAL_VALUE_PARSE_FAILED\"\n      );\n    let f = o ? r(e) : r;\n    if (n.returnType == \"array\")\n      return e.push(f), e;\n    if (typeof f != \"object\")\n      throw `Object or array can be setted only as a default value. Type of value is ${typeof f}.`;\n    for (const s of Object.keys(f))\n      e[s] = f[s];\n    return e;\n  }\n  let i = (e ?? [])[t[0]] ?? !1;\n  if (!i) {\n    let f = p(t, r, o);\n    try {\n      e[t[0]] = f;\n    } catch {\n      throw `Setting Failed at index ${t[0]} of [${l.join(\n        \" => \"\n      )}] due to the type ${typeof e}, Only array or object is assignable`;\n    }\n    return e;\n  }\n  return t.shift(), y(i, t, r, o, n, [\n    ...l,\n    u[0]\n  ]);\n}\nfunction p(e, t, r = !1) {\n  let o = [...e], n;\n  return o.length == 1 ? n = r ? t(null) : t : (n = {}, o.shift(), n[o[0]] = p(o, t, r)), n;\n}\nfunction a({ obj: e }, t, r = [], o = !1) {\n  let n = [];\n  for (let l in e) {\n    let u = e[l];\n    if (l.includes(t) && (u ?? !1))\n      n.push({\n        index: [...r, ...u.index ?? []],\n        value: u.value,\n        isFunction: u.isFunction\n      });\n    else if (typeof u == \"object\") {\n      const i = a(\n        { obj: u },\n        t,\n        [...r, l],\n        !0\n      );\n      n = n.concat(i.obj);\n    }\n  }\n  return o ? { obj: n } : {\n    result: n\n  };\n}\nfunction _(e, t, r = { returnType: \"object\" }) {\n  let { result: o } = a({ obj: t }, \"$$@@@@__upsert_hook\");\n  for (let n = 0; n < o.length; n++) {\n    let l = o[n];\n    y(\n      e,\n      l.index,\n      l.value,\n      l.isFunction,\n      r\n    );\n  }\n}\nfunction b(e, ...t) {\n  let r = {\n    returnType: \"object\"\n  };\n  const o = Array.isArray(e);\n  o && (r.returnType = \"array\");\n  for (let n of t)\n    _(e, n, r);\n  try {\n    return new Proxy(e, {\n      get(n, l, u) {\n        return n = o ? [...e] : { ...e }, l === \"get\" ? () => u : l === \"at\" ? (...i) => {\n          if (i.length <= 1)\n            throw \"keys.length is less than 2, need atleast 2 values to differentiate index and value\";\n          const f = i[i.length - 1], s = i;\n          return s.pop(), y(\n            e,\n            s,\n            f,\n            typeof f == \"function\",\n            r\n          ), u;\n        } : Reflect.get(n, l, u);\n      }\n    });\n  } catch {\n    throw Error(\n      `Cannot return value as returnType '${r.returnType}'. Please try '${r.returnType == \"array\" ? \"OBJECT\" : \"ARRAY\"}' returnType, ERROR: RETURN_ERROR.`\n    );\n  }\n}\nexport {\n  c as set,\n  b as upsert\n};\n","type FunctionStore = {\r\n  [key: string]: Function;\r\n};\r\n\r\nconst function_collection: FunctionStore = {};\r\nlet functionIdCounter = 0;\r\n\r\nexport let FunctionManager = {\r\n  collection: {},\r\n} as {\r\n  collection: {\r\n    store: (func: Function) => string;\r\n    retrive: (id: string) => Function;\r\n    get: Object;\r\n  };\r\n  store: (obj: unknown) => unknown;\r\n  fetch: (obj: Object) => Object;\r\n};\r\n\r\nFunctionManager.collection.store = (func: Function) => {\r\n  const id = `__func_${functionIdCounter++}__`;\r\n  function_collection[id] = func;\r\n\r\n  return id;\r\n};\r\nFunctionManager.collection.retrive = (id: string) => {\r\n  return function_collection[id];\r\n};\r\nFunctionManager.collection.get = () => {\r\n  return function_collection;\r\n};\r\n\r\nFunctionManager.store = (obj: any): any => {\r\n  if (typeof obj === \"function\") {\r\n    return FunctionManager.collection.store(obj);\r\n  } else if (Array.isArray(obj)) {\r\n    return obj.map(FunctionManager.store);\r\n  } else if (obj !== null && typeof obj === \"object\") {\r\n    return Object.keys(obj).reduce((acc, key) => {\r\n      acc[key] = FunctionManager.store(obj[key]);\r\n      return acc;\r\n    }, {} as any);\r\n  }\r\n  return obj;\r\n};\r\n\r\nFunctionManager.fetch = (obj: Object): Object => {\r\n  if (\r\n    typeof obj === \"string\" &&\r\n    obj.startsWith(\"__func_\") &&\r\n    obj.endsWith(\"__\")\r\n  ) {\r\n    return FunctionManager.collection.retrive(obj);\r\n  } else if (Array.isArray(obj)) {\r\n    return obj.map(FunctionManager.fetch);\r\n  } else if (obj !== null && typeof obj === \"object\") {\r\n    return Object.keys(obj).reduce<{ [key: string]: Object }>((acc, key) => {\r\n      //@ts-ignore\r\n      acc[key] = FunctionManager.fetch(obj[key]);\r\n      return acc;\r\n    }, {});\r\n  }\r\n  return obj;\r\n};\r\n","import { set } from \"js-upsert\";\r\nimport { FunctionManager } from \"../core/managers/FunctionManager\";\r\n\r\nexport function setFun<T>(value: T) {\r\n  return set<T>(() => FunctionManager.store(value) as T);\r\n}\r\n","import { set as jsSet, SetValueSignature } from \"js-upsert\";\r\nimport { setFun } from \"./setFun\";\r\n\r\ntype setType = {\r\n  <T>(value: T | ((prevValue: T) => T)): SetValueSignature<T>;\r\n  fun: <T>(fun: T) => SetValueSignature<T>;\r\n};\r\n\r\nexport const set = jsSet as unknown as setType;\r\n\r\nset.fun = setFun;\r\n","import { useThis_Instance } from \"../../useThis/useThisTypes\";\r\n\r\n/*\r\n\r\n\r\n  useThis-Effect\r\n\r\n  Idea: Execute a function on change of state\r\n\r\n  Initialization Flow:-\r\n\r\n  1. UseThis Dispatcher providing a reducer `EffectReducer` to useThis\r\n  2. On Initialisation of useThis(state_name) having a effect(effect_fun, dependent_state), effect is getting registered at a `effect_collection` \r\n  \r\n\r\n  Working Flow:-\r\n\r\n  All state dispatchers are having hook `executeEffects` to execute effect which is having dependency of current state. \r\n\r\n\r\n*/\r\nconst effect_collection: {\r\n  dependent_state: {\r\n    [state_id: string]: string[];\r\n  };\r\n  effects: {\r\n    [process_id: string]: Function;\r\n  };\r\n  registeredStates: { [state_name: string]: boolean };\r\n  registeredProcess: { [process_id: number]: string };\r\n  resolved: { [state_name: string]: boolean };\r\n  registeredDependency: { [state_name: string]: string[] };\r\n} = {\r\n  dependent_state: {},\r\n  effects: {},\r\n  registeredStates: {},\r\n  resolved: {},\r\n  registeredProcess: {},\r\n  registeredDependency: {},\r\n};\r\n\r\n/**\r\n *\r\n * @param props\r\n * @param props.state_name State name which is dispatching a effect fn\r\n * @param props.dependent_state_names Names of state which will execute effect fn on change\r\n * @param props.effect Effect Fn provided by user\r\n * @returns\r\n */\r\n\r\nexport function registerEffect(props: {\r\n  state_name: string;\r\n  effect: Function;\r\n  dependent_state_names: (string | useThis_Instance<unknown>)[];\r\n}) {\r\n  const { state_name, effect, dependent_state_names } = props;\r\n\r\n  if (\r\n    !Array.isArray(dependent_state_names) ||\r\n    dependent_state_names.length === 0\r\n  )\r\n    throw TypeError(\r\n      \"Second parameter of effect `dependent_states` must be a non-empty array.\"\r\n    );\r\n\r\n  // Check if state is already registered its effect or not\r\n\r\n  if (effect_collection.registeredStates?.[state_name]) return;\r\n\r\n  // Register a statename, to prevent re-rendering on next load\r\n\r\n  const process_id = state_name;\r\n\r\n  // Register proccess and state\r\n  effect_collection.registeredStates[state_name] = true;\r\n\r\n  // Iterate `dependent_state_names` and execute effects of each states\r\n\r\n  for (let dependent_state of dependent_state_names) {\r\n    if (\r\n      typeof dependent_state == \"function\" &&\r\n      //@ts-ignore\r\n      dependent_state?.[\"@___usethis\"] &&\r\n      dependent_state?.[\"this\"]\r\n    ) {\r\n      dependent_state = dependent_state[\"this\"];\r\n    }\r\n    if (typeof dependent_state === \"string\") {\r\n      // Verifing If dependent state registerd in collection or not, And appending new process_id to dependent_state\r\n\r\n      if (effect_collection.dependent_state?.[dependent_state]) {\r\n        effect_collection.dependent_state[dependent_state] = [\r\n          ...effect_collection.dependent_state[dependent_state],\r\n          process_id,\r\n        ];\r\n      } else {\r\n        effect_collection.dependent_state[dependent_state] = [process_id];\r\n      }\r\n\r\n      // Store decoded dependent state\r\n      effect_collection.registeredDependency[state_name] = [\r\n        ...(effect_collection.registeredDependency[state_name] ?? []),\r\n        dependent_state,\r\n      ];\r\n    } else {\r\n      throw TypeError(\r\n        \"Invalid type passed on `dependent_states`, Only string and useThis instance supported \"\r\n      );\r\n    }\r\n\r\n    // Storing effect fun in effects collection via process_id\r\n\r\n    effect_collection.effects[process_id] = effect;\r\n  }\r\n\r\n  // effect(() => deleteEffect({ state_name }));\r\n  console.log(effect_collection);\r\n}\r\n\r\n/*\r\n  ExecuteEffects is a dispatch hook, whenver dispatch fired, executeEffects fired after it.\r\n  It re-executes fired-state's all assigned processes\r\n*/\r\nexport function executeEffects(state_name: string) {\r\n  // Check if state is having any assigned effects or not\r\n\r\n  if (effect_collection.dependent_state?.[state_name]) {\r\n    // Execute all assigned process\r\n    for (const process_id of effect_collection.dependent_state[state_name]) {\r\n      try {\r\n        //  Executing the process function associated with process_id and passing resolveEffect\r\n        effect_collection.effects[process_id](() =>\r\n          resolveEffect({\r\n            dependent_state_name: state_name, // State which is dependent to process_id\r\n            state_name: process_id,\r\n          })\r\n        );\r\n      } catch (e) {\r\n        // Handle the error\r\n      }\r\n    }\r\n  }\r\n}\r\nexport function resolveEffect(props: {\r\n  dependent_state_name: string;\r\n  state_name: string;\r\n}) {\r\n  const { dependent_state_name, state_name } = props;\r\n  effect_collection.dependent_state[dependent_state_name] =\r\n    effect_collection.dependent_state[dependent_state_name].filter(\r\n      (item) => item !== state_name\r\n    );\r\n\r\n  delete effect_collection.effects[state_name];\r\n\r\n  effect_collection.resolved[state_name] = true;\r\n}\r\nexport function deleteEffect(props: { state_name: string }) {\r\n  let { state_name } = props;\r\n\r\n  // Iterate all registered process and remove states from dependency\r\n  for (let dependent_state of effect_collection.registeredDependency[\r\n    state_name\r\n  ]) {\r\n    effect_collection.dependent_state[dependent_state] =\r\n      effect_collection.dependent_state[dependent_state].filter(\r\n        (state) => state !== state_name\r\n      );\r\n  }\r\n  delete effect_collection.effects[state_name];\r\n  effect_collection.resolved[state_name] = true;\r\n}\r\n\r\nexport function getEffects() {\r\n  return effect_collection;\r\n}\r\n","import { upsert as up } from \"js-upsert\";\r\nimport { StateHandler } from \"../redux/slices/StateReducer\";\r\nimport _MAINSTORE, { StoreState } from \"../redux/store\";\r\nimport { useThisReturnType } from \"../useThis/useThisTypes\";\r\nimport { FunctionManager } from \"./managers/FunctionManager\";\r\n\r\n/*\r\n\r\n  These are reducers of useThis, for dispatching updating a state\r\n\r\n*/\r\n\r\nexport function Updater(StateName: keyof StoreState[\"This\"], dispatcher: any) {\r\n  return function update(data: any) {\r\n    let __DATA =\r\n      typeof data == \"function\"\r\n        ? data(_MAINSTORE.getState().This[StateName])\r\n        : data;\r\n\r\n    dispatcher(\r\n      StateHandler.update({\r\n        data: __DATA,\r\n        state: StateName,\r\n      })\r\n    );\r\n    return _MAINSTORE.getState().This[StateName];\r\n  };\r\n}\r\n\r\nexport function Appender(\r\n  StateName: keyof StoreState[\"This\"],\r\n  dispatcher: any\r\n): useThisReturnType<keyof StoreState[\"This\"]>[\"append\"] {\r\n  return function append(data) {\r\n    let __DATA =\r\n      typeof data == \"function\"\r\n        ? data(_MAINSTORE.getState().This[StateName])\r\n        : data;\r\n    dispatcher(\r\n      StateHandler.append({\r\n        data: __DATA,\r\n        state: StateName,\r\n      })\r\n    );\r\n    return _MAINSTORE.getState().This[StateName];\r\n  };\r\n}\r\n\r\nexport function Upsert(StateName: keyof StoreState[\"This\"], dispatcher: any) {\r\n  const main_state = _MAINSTORE?.getState()?.This[StateName];\r\n\r\n  function updater(data: any) {\r\n    try {\r\n      const haystack = Array.isArray(main_state)\r\n        ? [...main_state]\r\n        : { ...((main_state ?? {}) as object) };\r\n      dispatcher(\r\n        StateHandler.upsert({\r\n          data: up(haystack, data),\r\n          active_state: StateName,\r\n          config: {},\r\n        })\r\n      );\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const upsert = (\r\n    ...data: any\r\n  ): useThisReturnType<keyof StoreState[\"This\"]>[\"upsert\"] => {\r\n    for (let i of data) {\r\n      updater(i);\r\n    }\r\n    return _MAINSTORE.getState().This[StateName];\r\n  };\r\n\r\n  upsert.at = (...keys: [...(string | number)[], unknown]) => {\r\n    const haystack = Array.isArray(main_state)\r\n      ? [...main_state]\r\n      : { ...((main_state ?? {}) as object) };\r\n\r\n    dispatcher(\r\n      StateHandler.upsert({\r\n        data: up(haystack).at(...keys),\r\n        active_state: StateName,\r\n        config: {},\r\n      })\r\n    );\r\n    return _MAINSTORE.getState().This[StateName];\r\n  };\r\n  upsert.funAt = (...keys: [...(string | number)[], void]) => {\r\n    const haystack = Array.isArray(main_state)\r\n      ? [...main_state]\r\n      : { ...((main_state ?? {}) as object) };\r\n\r\n    const value = FunctionManager.store(keys[keys.length - 1]);\r\n\r\n    keys.pop();\r\n\r\n    const new_at_path = [...keys, value];\r\n    dispatcher(\r\n      StateHandler.upsert({\r\n        data: up(haystack).at(\r\n          ...(new_at_path as [...(string | number)[], void])\r\n        ),\r\n        active_state: StateName,\r\n        config: {},\r\n      })\r\n    );\r\n    return _MAINSTORE.getState().This[StateName];\r\n  };\r\n\r\n  return upsert;\r\n}\r\n","import { StateHandler } from \"../redux/slices/StateReducer\";\r\nimport _MAINSTORE, { StoreState } from \"../redux/store\";\r\nimport { useThisReturnType } from \"../useThis/useThisTypes\";\r\nimport { executeEffects, getEffects } from \"./managers/EffectManager\";\r\nimport { FunctionManager } from \"./managers/FunctionManager\";\r\nimport { Appender, Updater, Upsert } from \"./Reducers\";\r\n\r\nexport const useThisDispatcher = (StateName: string, defaultValue: any) => {\r\n  const redux_dispatcher = _MAINSTORE.dispatch;\r\n  const dispatcher = (param: any) => {\r\n    const r = redux_dispatcher(param);\r\n\r\n    // Execute all exisiting effects which is dependent on given state\r\n\r\n    executeEffects(StateName);\r\n    return r;\r\n  };\r\n  const requestedStateName = StateName as keyof StoreState[\"This\"];\r\n  const state_data = _MAINSTORE.getState()?.This;\r\n  if (\r\n    !state_data[requestedStateName] &&\r\n    defaultValue &&\r\n    !getEffects().resolved[requestedStateName]\r\n  ) {\r\n    dispatcher(\r\n      StateHandler.update({\r\n        data: defaultValue,\r\n        state: requestedStateName,\r\n      })\r\n    );\r\n  }\r\n\r\n  const useThisReturn = {\r\n    update: Updater(\r\n      requestedStateName,\r\n      dispatcher\r\n    ) as unknown as useThisReturnType<StoreState[\"This\"]>[\"update\"],\r\n    append: Appender(\r\n      requestedStateName,\r\n      dispatcher\r\n    ) as unknown as useThisReturnType<StoreState[\"This\"]>[\"append\"],\r\n    upsert: Upsert(\r\n      requestedStateName,\r\n      dispatcher\r\n    ) as unknown as useThisReturnType<StoreState[\"This\"]>[\"upsert\"],\r\n    dispatcher: dispatcher,\r\n    This: _MAINSTORE.getState().This[requestedStateName],\r\n    get: () =>\r\n      _MAINSTORE.getState().This[\r\n        requestedStateName\r\n      ] as unknown as useThisReturnType<StoreState[\"This\"]>[\"get\"],\r\n    fetch: () =>\r\n      FunctionManager.fetch(\r\n        _MAINSTORE.getState().This[requestedStateName]\r\n      ) as unknown as useThisReturnType<StoreState[\"This\"]>[\"fetch\"],\r\n  };\r\n\r\n  return useThisReturn as useThisReturnType<StoreState[\"This\"]>;\r\n};\r\nexport const useThisInstanceDispatcher = (StateName: string) => {\r\n  const redux_dispatcher = _MAINSTORE.dispatch;\r\n  const dispatcher = (param: any) => {\r\n    const r = redux_dispatcher(param);\r\n\r\n    // Execute all exisiting effects which is dependent on given state\r\n    executeEffects(StateName);\r\n    return r;\r\n  };\r\n  const requestedStateName = StateName as keyof StoreState[\"This\"];\r\n\r\n  const useThisReturn = {\r\n    update: Updater(\r\n      requestedStateName,\r\n      dispatcher\r\n    ) as unknown as useThisReturnType<StoreState[\"This\"]>[\"update\"],\r\n    append: Appender(\r\n      requestedStateName,\r\n      dispatcher\r\n    ) as unknown as useThisReturnType<StoreState[\"This\"]>[\"append\"],\r\n    upsert: Upsert(\r\n      requestedStateName,\r\n      dispatcher\r\n    ) as unknown as useThisReturnType<StoreState[\"This\"]>[\"upsert\"],\r\n    dispatcher: dispatcher,\r\n    This: _MAINSTORE.getState().This[requestedStateName],\r\n    get: () =>\r\n      _MAINSTORE.getState().This[\r\n        requestedStateName\r\n      ] as unknown as useThisReturnType<StoreState[\"This\"]>[\"get\"],\r\n    fetch: () =>\r\n      FunctionManager.fetch(\r\n        _MAINSTORE.getState().This[requestedStateName]\r\n      ) as unknown as useThisReturnType<StoreState[\"This\"]>[\"fetch\"],\r\n  };\r\n\r\n  return {\r\n    ...useThisReturn,\r\n  } as useThisReturnType<StoreState[\"This\"]>;\r\n};\r\n","import { useSelector } from \"react-redux\";\r\nimport { useThisInstanceDispatcher } from \"../core/Dispatcher\";\r\nimport { registerEffect } from \"../core/managers/EffectManager\";\r\nimport { StateHandler } from \"../redux/slices/StateReducer\";\r\nimport _MAINSTORE, { StoreState } from \"../redux/store\";\r\nimport { useThis_this_instance, useThisInstanceType } from \"./useThisTypes\";\r\nexport function useThisInstanceReturn(prop1: unknown) {\r\n  const instance_data: useThis_this_instance = {\r\n    created: false,\r\n    stateName: \"state_\" + Math.floor(100000 + Math.random() * 900000),\r\n  };\r\n\r\n  if (prop1 && typeof prop1 == \"object\") {\r\n    instance_data.defaultData = prop1;\r\n  }\r\n\r\n  const useThisInstance = <T,>() => {\r\n    if (!instance_data.created) {\r\n      throw Error(\"Cannot use useThis Instance without created\");\r\n    }\r\n\r\n    return useThisInstanceFunction<T>(instance_data.stateName);\r\n  };\r\n\r\n  useThisInstance[\"@___usethis\"] = __APP_VERSION__;\r\n  useThisInstance[\"this\"] = instance_data.stateName;\r\n\r\n  useThisInstance.onEffect = (resolver: any, dependent_states: any) => {\r\n    instance_data[\"onEffect\"] = {\r\n      resolver,\r\n      dependent_states,\r\n    };\r\n\r\n    return useThisInstance;\r\n  };\r\n  useThisInstance.stateName = (state_name: string) => {\r\n    instance_data[\"stateName\"] = state_name;\r\n\r\n    return useThisInstance;\r\n  };\r\n  useThisInstance.default = <T extends object>(object: T) => {\r\n    instance_data[\"defaultData\"] = object;\r\n\r\n    return useThisInstance as () => ReturnType<\r\n      typeof useThisInstanceFunction<T>\r\n    >;\r\n  };\r\n\r\n  useThisInstance.setConfig = <T extends keyof useThis_this_instance>(\r\n    config_name: T,\r\n    value: useThis_this_instance[T]\r\n  ) => {\r\n    instance_data[config_name] = value;\r\n    return useThisInstance;\r\n  };\r\n\r\n  useThisInstance.create = () => {\r\n    if (instance_data.created) return;\r\n    useThisInstance[\"this\"] = instance_data.stateName;\r\n\r\n    if (instance_data.defaultData) {\r\n      _MAINSTORE.dispatch(\r\n        StateHandler.update({\r\n          data: instance_data.defaultData,\r\n          state: instance_data.stateName,\r\n        })\r\n      );\r\n    }\r\n\r\n    if (instance_data.onEffect) {\r\n      registerEffect({\r\n        state_name: instance_data.stateName,\r\n        dependent_state_names: instance_data.onEffect.dependent_states ?? [],\r\n\r\n        // Effect is stored in effect_collection.effects.{process_id}, This will execute on effect condtion\r\n\r\n        effect: (effectResolver: Function) =>\r\n          instance_data.onEffect?.resolver({\r\n            thisState: _MAINSTORE.getState().This,\r\n            state: (\r\n              state_name:\r\n                | keyof StoreState[\"This\"]\r\n                | (Function & {\r\n                    this: keyof StoreState[\"This\"];\r\n                    \"@___usethis\": unknown;\r\n                  })\r\n            ) => {\r\n              if (typeof state_name == \"function\" && state_name[\"@___usethis\"])\r\n                return _MAINSTORE.getState().This[state_name.this];\r\n              return _MAINSTORE.getState().This[\r\n                state_name as keyof StoreState[\"This\"]\r\n              ];\r\n            },\r\n            resolver: () => {\r\n              _MAINSTORE.dispatch(\r\n                StateHandler.removeState({\r\n                  active_state: instance_data.stateName,\r\n                })\r\n              );\r\n              effectResolver();\r\n\r\n              instance_data.created = false;\r\n            },\r\n          }),\r\n      });\r\n    }\r\n\r\n    instance_data.created = true;\r\n\r\n    return useThisInstance;\r\n  };\r\n\r\n  useThisInstance.static = {\r\n    //@ts-ignore\r\n    get: () => _MAINSTORE.getState().This[useThisInstance[\"this\"] as string],\r\n  };\r\n  return useThisInstance;\r\n}\r\n\r\nfunction useThisInstanceFunction<DefaultValue>(\r\n  StateName: string\r\n): useThisInstanceType<DefaultValue> {\r\n  try {\r\n    useSelector((s: any) => s.This?.[StateName]);\r\n  } catch (e) {}\r\n\r\n  return useThisInstanceDispatcher(\r\n    StateName\r\n  ) as unknown as useThisInstanceType<DefaultValue>;\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { useThisDispatcher } from \"../core/Dispatcher\";\r\nimport { useThisInstanceReturn } from \"./useThisInstance\";\r\nimport { useThisReturnType, useThisType } from \"./useThisTypes\";\r\n\r\nfunction useThisMainFunction<DefaultValue>(\r\n  StateName: string,\r\n  defaultValue?: DefaultValue\r\n): useThisReturnType<DefaultValue> {\r\n  try {\r\n    useSelector((s: any) => s.This?.[StateName]);\r\n  } catch (e) {}\r\n\r\n  return useThisDispatcher(\r\n    StateName,\r\n    defaultValue\r\n  ) as unknown as useThisReturnType<DefaultValue>;\r\n}\r\n\r\nfunction useThisBuilder(prop1: unknown, prop2: unknown) {\r\n  // Handling new Instance\r\n  if (new.target) {\r\n    return useThisInstanceReturn(prop1);\r\n  }\r\n\r\n  // Rtn useThis as it is\r\n  return useThisMainFunction(prop1 as string, prop2);\r\n}\r\n\r\nexport const useThis: useThisType = useThisBuilder as unknown as useThisType;\r\n"],"names":["h","e","c","t","r","o","y","n","l","f","s","i","p","a","_","b","function_collection","functionIdCounter","FunctionManager","func","id","obj","acc","key","setFun","value","set","jsSet","effect_collection","registerEffect","props","state_name","effect","dependent_state_names","_a","process_id","dependent_state","_b","executeEffects","resolveEffect","dependent_state_name","item","getEffects","Updater","StateName","dispatcher","data","__DATA","_MAINSTORE","StateHandler","Appender","Upsert","main_state","updater","haystack","up","upsert","keys","new_at_path","useThisDispatcher","defaultValue","redux_dispatcher","param","requestedStateName","useThisInstanceDispatcher","useThisInstanceReturn","prop1","instance_data","useThisInstance","useThisInstanceFunction","resolver","dependent_states","object","config_name","effectResolver","useSelector","useThisMainFunction","useThisBuilder","prop2","useThis"],"mappings":"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","x_google_ignoreList":[0]}