{"version":3,"file":"index.js","sources":["../src/redux/middleware/function_presever.ts","../src/setters/setFun.tsx","../src/setters/set.tsx","../src/useThisWithoutProvider/UTWP.tsx","../src/getThis/getThis.ts","../src/useThis/useThis.ts"],"sourcesContent":["import { Middleware } from \"redux\";\r\nimport { storeFunction } from \"../../utils/functionStore\";\r\n\r\nexport const replaceFunctionsWithIds = (obj: any): any => {\r\n  if (typeof obj === \"function\") {\r\n    return storeFunction(obj);\r\n  } else if (Array.isArray(obj)) {\r\n    return obj.map(replaceFunctionsWithIds);\r\n  } else if (obj !== null && typeof obj === \"object\") {\r\n    return Object.keys(obj).reduce((acc, key) => {\r\n      acc[key] = replaceFunctionsWithIds(obj[key]);\r\n      return acc;\r\n    }, {} as any);\r\n  }\r\n  return obj;\r\n};\r\n\r\nexport const functionMiddleware: Middleware = () => (next) => (action) => {\r\n  const actionWithFunctionIds = replaceFunctionsWithIds(action);\r\n  return next(actionWithFunctionIds);\r\n};\r\n","import { set } from \"js-upsert\";\r\nimport { replaceFunctionsWithIds } from \"../redux/middleware/function_presever\";\r\n\r\nexport function setFun<T>(value: T) {\r\n  return set<T>(() => replaceFunctionsWithIds(value));\r\n}\r\n","import { set as jsSet, SetValueSignature } from \"js-upsert\";\r\nimport { setFun } from \"./setFun\";\r\n\r\ntype setType = {\r\n  <T>(value: T | ((prevValue: T) => T)): SetValueSignature<T>;\r\n  fun: <T>(fun: T) => SetValueSignature<T>;\r\n};\r\n\r\nexport const set = jsSet as unknown as setType;\r\n\r\nset.fun = setFun;\r\n","import _MAINSTORE from \"../redux/store\";\r\nimport { useThisDispatcher } from \"../core/Dispatcher\";\r\n\r\n/*\r\n  UTWP: useThis Without Provider, It dispatches state utils without useThis Provider\r\n*/\r\n\r\nexport function UTWP(StateName: string, defaultValue: any) {\r\n  return useThisDispatcher(_MAINSTORE.dispatch, {\r\n    type: \"without_provider\",\r\n  })(StateName, defaultValue);\r\n}\r\n","import _MAINSTORE, { StoreState } from \"../redux/store\";\r\nimport { UTWP } from \"../useThisWithoutProvider/UTWP\";\r\n\r\nexport function getThis(\r\n  StateName: keyof StoreState[\"This\"],\r\n  defaultValue?: any\r\n) {\r\n  return UTWP(StateName, defaultValue);\r\n}\r\n","import { useContext } from \"react\";\r\nimport ThisContext from \"../thisContext/context\";\r\nimport { UTWP } from \"../useThisWithoutProvider/UTWP\";\r\nimport { typeParam_upsert } from \"js-upsert\";\r\n/**\r\n * useThis allows you to use global state in simplified way. Just specify a state name then ready to go.\r\n * @param StateName\r\n * @param defaultValue\r\n * @returns\r\n */\r\n\r\ntype StateManager<T> = {\r\n  get: () => T;\r\n  update: (newState: ((previos_state: T) => T) | T) => T;\r\n  append: (newState: ((previos_state: T) => Partial<T>) | Partial<T>) => T;\r\n  upsert: <K>(...partialState: typeParam_upsert<T, keyof K>[]) => T;\r\n  fetch: () => T;\r\n};\r\n\r\nexport function useThis<DefaultValue>(\r\n  StateName: string,\r\n  defaultValue?: DefaultValue\r\n): StateManager<DefaultValue> {\r\n  let context;\r\n\r\n  try {\r\n    context = useContext(ThisContext) as any;\r\n  } catch (e) {\r\n    context = null;\r\n  }\r\n\r\n  if (context === null) {\r\n    return UTWP(StateName, defaultValue) as any;\r\n  }\r\n  return context(StateName, defaultValue);\r\n}\r\n"],"names":["replaceFunctionsWithIds","obj","storeFunction","acc","key","setFun","value","set","jsSet","UTWP","StateName","defaultValue","useThisDispatcher","_MAINSTORE","getThis","useThis","context","useContext","ThisContext"],"mappings":";;AAGa,MAAAA,IAA0B,CAACC,MAClC,OAAOA,KAAQ,aACVC,EAAcD,CAAG,IACf,MAAM,QAAQA,CAAG,IACnBA,EAAI,IAAID,CAAuB,IAC7BC,MAAQ,QAAQ,OAAOA,KAAQ,WACjC,OAAO,KAAKA,CAAG,EAAE,OAAO,CAACE,GAAKC,OACnCD,EAAIC,CAAG,IAAIJ,EAAwBC,EAAIG,CAAG,CAAC,GACpCD,IACN,CAAS,CAAA,IAEPF;ACXF,SAASI,EAAUC,GAAU;AAClC,SAAOC,EAAO,MAAMP,EAAwBM,CAAK,CAAC;AACpD;ACGO,MAAMC,IAAMC;AAEnBD,EAAI,MAAMF;ACHM,SAAAI,EAAKC,GAAmBC,GAAmB;AAClD,SAAAC,EAAkBC,EAAW,UAAU;AAAA,IAC5C,MAAM;AAAA,EAAA,CACP,EAAEH,GAAWC,CAAY;AAC5B;ACRgB,SAAAG,EACdJ,GACAC,GACA;AACO,SAAAF,EAAKC,GAAWC,CAAY;AACrC;ACWgB,SAAAI,EACdL,GACAC,GAC4B;AACxB,MAAAK;AAEA,MAAA;AACF,IAAAA,IAAUC,EAAWC,CAAW;AAAA,UACtB;AACA,IAAAF,IAAA;AAAA,EACZ;AAEA,SAAIA,MAAY,OACPP,EAAKC,GAAWC,CAAY,IAE9BK,EAAQN,GAAWC,CAAY;AACxC;"}